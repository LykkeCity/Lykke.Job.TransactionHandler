// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace LkeServices.Generated.MarginApi
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for MarginTradingApi.
    /// </summary>
    public static partial class MarginTradingApiExtensions
    {
            /// <summary>
            /// Returns margin account by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='accountId'>
            /// </param>
            public static MarginTradingAccountBackendContract ApiAccountprofileAccountByClientIdByAccountIdGet(this IMarginTradingApi operations, string clientId, string accountId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiAccountprofileAccountByClientIdByAccountIdGetAsync(clientId, accountId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns margin account by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='accountId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<MarginTradingAccountBackendContract> ApiAccountprofileAccountByClientIdByAccountIdGetAsync(this IMarginTradingApi operations, string clientId, string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiAccountprofileAccountByClientIdByAccountIdGetWithHttpMessagesAsync(clientId, accountId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns account open positions by account id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountId'>
            /// </param>
            public static System.Collections.Generic.IList<OrderContract> ApiAccountprofileOpenPositionsByAccountIdGet(this IMarginTradingApi operations, string accountId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiAccountprofileOpenPositionsByAccountIdGetAsync(accountId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns account open positions by account id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<OrderContract>> ApiAccountprofileOpenPositionsByAccountIdGetAsync(this IMarginTradingApi operations, string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiAccountprofileOpenPositionsByAccountIdGetWithHttpMessagesAsync(accountId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns account history by account id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='accountId'>
            /// </param>
            public static AccountHistoryBackendResponse ApiAccountprofileHistoryByClientIdByAccountIdGet(this IMarginTradingApi operations, string clientId, string accountId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiAccountprofileHistoryByClientIdByAccountIdGetAsync(clientId, accountId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns account history by account id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='accountId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AccountHistoryBackendResponse> ApiAccountprofileHistoryByClientIdByAccountIdGetAsync(this IMarginTradingApi operations, string clientId, string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiAccountprofileHistoryByClientIdByAccountIdGetWithHttpMessagesAsync(clientId, accountId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns summary asset info
            /// </summary>
            /// <remarks>
            /// VolumeLong is a sum of long positions volume
            /// 
            /// VolumeShort is a sum of short positions volume
            /// 
            /// PnL is a sum of all positions PnL
            /// 
            /// Header "api-key" is required
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static System.Collections.Generic.IList<SummaryAssetInfo> ApiBackofficeAssetsInfoGet(this IMarginTradingApi operations, string apiKey)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeAssetsInfoGetAsync(apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns summary asset info
            /// </summary>
            /// <remarks>
            /// VolumeLong is a sum of long positions volume
            /// 
            /// VolumeShort is a sum of short positions volume
            /// 
            /// PnL is a sum of all positions PnL
            /// 
            /// Header "api-key" is required
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<SummaryAssetInfo>> ApiBackofficeAssetsInfoGetAsync(this IMarginTradingApi operations, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeAssetsInfoGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns list of opened positions
            /// </summary>
            /// <remarks>
            /// Returns list of opened positions with matched volume greater or equal
            /// provided "volume" parameter
            /// 
            /// Header "api-key" is required
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='volume'>
            /// </param>
            public static System.Collections.Generic.IList<OrderContract> ApiBackofficePositionsByVolumeGet(this IMarginTradingApi operations, string apiKey, double? volume = default(double?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficePositionsByVolumeGetAsync(apiKey, volume), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns list of opened positions
            /// </summary>
            /// <remarks>
            /// Returns list of opened positions with matched volume greater or equal
            /// provided "volume" parameter
            /// 
            /// Header "api-key" is required
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='volume'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<OrderContract>> ApiBackofficePositionsByVolumeGetAsync(this IMarginTradingApi operations, string apiKey, double? volume = default(double?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiBackofficePositionsByVolumeGetWithHttpMessagesAsync(apiKey, volume, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns list of pending orders
            /// </summary>
            /// <remarks>
            /// Returns list of pending orders with volume greater or equal provided
            /// "volume" parameter
            /// 
            /// Header "api-key" is required
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='volume'>
            /// </param>
            public static System.Collections.Generic.IList<OrderContract> ApiBackofficePendingOrdersByVolumeGet(this IMarginTradingApi operations, string apiKey, double? volume = default(double?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficePendingOrdersByVolumeGetAsync(apiKey, volume), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns list of pending orders
            /// </summary>
            /// <remarks>
            /// Returns list of pending orders with volume greater or equal provided
            /// "volume" parameter
            /// 
            /// Header "api-key" is required
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='volume'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<OrderContract>> ApiBackofficePendingOrdersByVolumeGetAsync(this IMarginTradingApi operations, string apiKey, double? volume = default(double?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiBackofficePendingOrdersByVolumeGetWithHttpMessagesAsync(apiKey, volume, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns list of orderbooks
            /// </summary>
            /// <remarks>
            /// Returns list of orderbooks by instrument (all orderbooks if no instrument
            /// is provided)
            /// 
            /// Header "api-key" is required
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='instrument'>
            /// </param>
            public static System.Collections.Generic.IList<OrderBookModel> ApiBackofficeOrderbooksGet(this IMarginTradingApi operations, string apiKey, string instrument = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeOrderbooksGetAsync(apiKey, instrument), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns list of orderbooks
            /// </summary>
            /// <remarks>
            /// Returns list of orderbooks by instrument (all orderbooks if no instrument
            /// is provided)
            /// 
            /// Header "api-key" is required
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='instrument'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<OrderBookModel>> ApiBackofficeOrderbooksGetAsync(this IMarginTradingApi operations, string apiKey, string instrument = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeOrderbooksGetWithHttpMessagesAsync(apiKey, instrument, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets trading condition for account
            /// </summary>
            /// <remarks>
            /// Header "api-key" is required
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='model'>
            /// </param>
            public static bool? ApiBackofficeSetTradingConditionPost(this IMarginTradingApi operations, string apiKey, SetTradingConditionModel model = default(SetTradingConditionModel))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeSetTradingConditionPostAsync(apiKey, model), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets trading condition for account
            /// </summary>
            /// <remarks>
            /// Header "api-key" is required
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<bool?> ApiBackofficeSetTradingConditionPostAsync(this IMarginTradingApi operations, string apiKey, SetTradingConditionModel model = default(SetTradingConditionModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeSetTradingConditionPostWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static System.Collections.Generic.IList<MarginTradingCondition> ApiBackofficeTradingConditionsGetallGet(this IMarginTradingApi operations, string apiKey)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeTradingConditionsGetallGetAsync(apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<MarginTradingCondition>> ApiBackofficeTradingConditionsGetallGetAsync(this IMarginTradingApi operations, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeTradingConditionsGetallGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static MarginTradingCondition ApiBackofficeTradingConditionsGetByIdGet(this IMarginTradingApi operations, string id, string apiKey)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeTradingConditionsGetByIdGetAsync(id, apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<MarginTradingCondition> ApiBackofficeTradingConditionsGetByIdGetAsync(this IMarginTradingApi operations, string id, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeTradingConditionsGetByIdGetWithHttpMessagesAsync(id, apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='model'>
            /// </param>
            public static void ApiBackofficeTradingConditionsAddPost(this IMarginTradingApi operations, string apiKey, MarginTradingCondition model = default(MarginTradingCondition))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeTradingConditionsAddPostAsync(apiKey, model), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ApiBackofficeTradingConditionsAddPostAsync(this IMarginTradingApi operations, string apiKey, MarginTradingCondition model = default(MarginTradingCondition), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ApiBackofficeTradingConditionsAddPostWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static System.Collections.Generic.IList<MarginTradingAccountGroup> ApiBackofficeAccountGroupsGetallGet(this IMarginTradingApi operations, string apiKey)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeAccountGroupsGetallGetAsync(apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<MarginTradingAccountGroup>> ApiBackofficeAccountGroupsGetallGetAsync(this IMarginTradingApi operations, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeAccountGroupsGetallGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tradingConditionId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static MarginTradingAccountGroup ApiBackofficeAccountGroupsGetByTradingConditionIdByIdGet(this IMarginTradingApi operations, string tradingConditionId, string id, string apiKey)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeAccountGroupsGetByTradingConditionIdByIdGetAsync(tradingConditionId, id, apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tradingConditionId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<MarginTradingAccountGroup> ApiBackofficeAccountGroupsGetByTradingConditionIdByIdGetAsync(this IMarginTradingApi operations, string tradingConditionId, string id, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeAccountGroupsGetByTradingConditionIdByIdGetWithHttpMessagesAsync(tradingConditionId, id, apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='model'>
            /// </param>
            public static void ApiBackofficeAccountGroupsAddPost(this IMarginTradingApi operations, string apiKey, MarginTradingAccountGroup model = default(MarginTradingAccountGroup))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeAccountGroupsAddPostAsync(apiKey, model), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ApiBackofficeAccountGroupsAddPostAsync(this IMarginTradingApi operations, string apiKey, MarginTradingAccountGroup model = default(MarginTradingAccountGroup), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ApiBackofficeAccountGroupsAddPostWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tradingConditionId'>
            /// </param>
            /// <param name='accountAssetId'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static System.Collections.Generic.IList<MarginTradingAccountAsset> ApiBackofficeAccountAssetsGetallByTradingConditionIdByAccountAssetIdGet(this IMarginTradingApi operations, string tradingConditionId, string accountAssetId, string apiKey)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeAccountAssetsGetallByTradingConditionIdByAccountAssetIdGetAsync(tradingConditionId, accountAssetId, apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tradingConditionId'>
            /// </param>
            /// <param name='accountAssetId'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<MarginTradingAccountAsset>> ApiBackofficeAccountAssetsGetallByTradingConditionIdByAccountAssetIdGetAsync(this IMarginTradingApi operations, string tradingConditionId, string accountAssetId, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeAccountAssetsGetallByTradingConditionIdByAccountAssetIdGetWithHttpMessagesAsync(tradingConditionId, accountAssetId, apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tradingConditionId'>
            /// </param>
            /// <param name='baseAssetId'>
            /// </param>
            /// <param name='instrumet'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static MarginTradingAccountAsset ApiBackofficeAccountAssetsGetByTradingConditionIdByBaseAssetIdByInstrumetGet(this IMarginTradingApi operations, string tradingConditionId, string baseAssetId, string instrumet, string apiKey)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeAccountAssetsGetByTradingConditionIdByBaseAssetIdByInstrumetGetAsync(tradingConditionId, baseAssetId, instrumet, apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tradingConditionId'>
            /// </param>
            /// <param name='baseAssetId'>
            /// </param>
            /// <param name='instrumet'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<MarginTradingAccountAsset> ApiBackofficeAccountAssetsGetByTradingConditionIdByBaseAssetIdByInstrumetGetAsync(this IMarginTradingApi operations, string tradingConditionId, string baseAssetId, string instrumet, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeAccountAssetsGetByTradingConditionIdByBaseAssetIdByInstrumetGetWithHttpMessagesAsync(tradingConditionId, baseAssetId, instrumet, apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='model'>
            /// </param>
            public static MarginTradingAccountAsset ApiBackofficeAccountAssetsAssignInstrumentsPost(this IMarginTradingApi operations, string apiKey, AssignInstrumentsModel model = default(AssignInstrumentsModel))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeAccountAssetsAssignInstrumentsPostAsync(apiKey, model), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<MarginTradingAccountAsset> ApiBackofficeAccountAssetsAssignInstrumentsPostAsync(this IMarginTradingApi operations, string apiKey, AssignInstrumentsModel model = default(AssignInstrumentsModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeAccountAssetsAssignInstrumentsPostWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='model'>
            /// </param>
            public static void ApiBackofficeAccountAssetsAddPost(this IMarginTradingApi operations, string apiKey, MarginTradingAccountAsset model = default(MarginTradingAccountAsset))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeAccountAssetsAddPostAsync(apiKey, model), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ApiBackofficeAccountAssetsAddPostAsync(this IMarginTradingApi operations, string apiKey, MarginTradingAccountAsset model = default(MarginTradingAccountAsset), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ApiBackofficeAccountAssetsAddPostWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static System.Collections.Generic.IList<MarginTradingAsset> ApiBackofficeInstrumentsGetallGet(this IMarginTradingApi operations, string apiKey)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeInstrumentsGetallGetAsync(apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<MarginTradingAsset>> ApiBackofficeInstrumentsGetallGetAsync(this IMarginTradingApi operations, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeInstrumentsGetallGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static System.Collections.Generic.IList<string> ApiBackofficeMatchingenginesGetallGet(this IMarginTradingApi operations, string apiKey)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeMatchingenginesGetallGetAsync(apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> ApiBackofficeMatchingenginesGetallGetAsync(this IMarginTradingApi operations, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeMatchingenginesGetallGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static System.Collections.Generic.IList<string> ApiBackofficeOrderTypesGetallGet(this IMarginTradingApi operations, string apiKey)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeOrderTypesGetallGetAsync(apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> ApiBackofficeOrderTypesGetallGetAsync(this IMarginTradingApi operations, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeOrderTypesGetallGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static System.Collections.Generic.IList<MarginTradingAccount> ApiBackofficeMarginTradingAccountsGetallByClientIdGet(this IMarginTradingApi operations, string clientId, string apiKey)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeMarginTradingAccountsGetallByClientIdGetAsync(clientId, apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<MarginTradingAccount>> ApiBackofficeMarginTradingAccountsGetallByClientIdGetAsync(this IMarginTradingApi operations, string clientId, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeMarginTradingAccountsGetallByClientIdGetWithHttpMessagesAsync(clientId, apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='accountId'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static void ApiBackofficeMarginTradingAccountsDeleteByClientIdByAccountIdPost(this IMarginTradingApi operations, string clientId, string accountId, string apiKey)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeMarginTradingAccountsDeleteByClientIdByAccountIdPostAsync(clientId, accountId, apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='accountId'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ApiBackofficeMarginTradingAccountsDeleteByClientIdByAccountIdPostAsync(this IMarginTradingApi operations, string clientId, string accountId, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ApiBackofficeMarginTradingAccountsDeleteByClientIdByAccountIdPostWithHttpMessagesAsync(clientId, accountId, apiKey, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            public static InitAccountsResponse ApiBackofficeMarginTradingAccountsInitPost(this IMarginTradingApi operations, string apiKey, InitAccountsRequest request = default(InitAccountsRequest))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeMarginTradingAccountsInitPostAsync(apiKey, request), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<InitAccountsResponse> ApiBackofficeMarginTradingAccountsInitPostAsync(this IMarginTradingApi operations, string apiKey, InitAccountsRequest request = default(InitAccountsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeMarginTradingAccountsInitPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='account'>
            /// </param>
            public static void ApiBackofficeMarginTradingAccountsAddPost(this IMarginTradingApi operations, string apiKey, MarginTradingAccount account = default(MarginTradingAccount))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeMarginTradingAccountsAddPostAsync(apiKey, account), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='account'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ApiBackofficeMarginTradingAccountsAddPostAsync(this IMarginTradingApi operations, string apiKey, MarginTradingAccount account = default(MarginTradingAccount), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ApiBackofficeMarginTradingAccountsAddPostWithHttpMessagesAsync(apiKey, account, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            public static bool? ApiBackofficeMarginTradingAccountsDepositPost(this IMarginTradingApi operations, string apiKey, AccountDepositWithdrawRequest request = default(AccountDepositWithdrawRequest))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeMarginTradingAccountsDepositPostAsync(apiKey, request), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<bool?> ApiBackofficeMarginTradingAccountsDepositPostAsync(this IMarginTradingApi operations, string apiKey, AccountDepositWithdrawRequest request = default(AccountDepositWithdrawRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeMarginTradingAccountsDepositPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            public static bool? ApiBackofficeMarginTradingAccountsWithdrawPost(this IMarginTradingApi operations, string apiKey, AccountDepositWithdrawRequest request = default(AccountDepositWithdrawRequest))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeMarginTradingAccountsWithdrawPostAsync(apiKey, request), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<bool?> ApiBackofficeMarginTradingAccountsWithdrawPostAsync(this IMarginTradingApi operations, string apiKey, AccountDepositWithdrawRequest request = default(AccountDepositWithdrawRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeMarginTradingAccountsWithdrawPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            public static bool? ApiBackofficeMarginTradingAccountsResetPost(this IMarginTradingApi operations, string apiKey, AccounResetRequest request = default(AccounResetRequest))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeMarginTradingAccountsResetPostAsync(apiKey, request), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<bool?> ApiBackofficeMarginTradingAccountsResetPostAsync(this IMarginTradingApi operations, string apiKey, AccounResetRequest request = default(AccounResetRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeMarginTradingAccountsResetPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static System.Collections.Generic.IList<MatchingEngineRoute> ApiBackofficeRoutesGetallglobalGet(this IMarginTradingApi operations, string apiKey)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeRoutesGetallglobalGetAsync(apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<MatchingEngineRoute>> ApiBackofficeRoutesGetallglobalGetAsync(this IMarginTradingApi operations, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeRoutesGetallglobalGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static System.Collections.Generic.IList<MatchingEngineRoute> ApiBackofficeRoutesGetalllocalGet(this IMarginTradingApi operations, string apiKey)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeRoutesGetalllocalGetAsync(apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<MatchingEngineRoute>> ApiBackofficeRoutesGetalllocalGetAsync(this IMarginTradingApi operations, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeRoutesGetalllocalGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static MatchingEngineRoute ApiBackofficeRoutesGetByIdGet(this IMarginTradingApi operations, string id, string apiKey)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeRoutesGetByIdGetAsync(id, apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<MatchingEngineRoute> ApiBackofficeRoutesGetByIdGetAsync(this IMarginTradingApi operations, string id, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeRoutesGetByIdGetWithHttpMessagesAsync(id, apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='route'>
            /// </param>
            public static void ApiBackofficeRoutesAddglobalPost(this IMarginTradingApi operations, string apiKey, MatchingEngineRoute route = default(MatchingEngineRoute))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeRoutesAddglobalPostAsync(apiKey, route), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='route'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ApiBackofficeRoutesAddglobalPostAsync(this IMarginTradingApi operations, string apiKey, MatchingEngineRoute route = default(MatchingEngineRoute), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ApiBackofficeRoutesAddglobalPostWithHttpMessagesAsync(apiKey, route, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='route'>
            /// </param>
            public static void ApiBackofficeRoutesAddlocalPost(this IMarginTradingApi operations, string apiKey, MatchingEngineRoute route = default(MatchingEngineRoute))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeRoutesAddlocalPostAsync(apiKey, route), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='route'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ApiBackofficeRoutesAddlocalPostAsync(this IMarginTradingApi operations, string apiKey, MatchingEngineRoute route = default(MatchingEngineRoute), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ApiBackofficeRoutesAddlocalPostWithHttpMessagesAsync(apiKey, route, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static void ApiBackofficeRoutesDeleteglobalByIdPost(this IMarginTradingApi operations, string id, string apiKey)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeRoutesDeleteglobalByIdPostAsync(id, apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ApiBackofficeRoutesDeleteglobalByIdPostAsync(this IMarginTradingApi operations, string id, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ApiBackofficeRoutesDeleteglobalByIdPostWithHttpMessagesAsync(id, apiKey, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static void ApiBackofficeRoutesDeletelocalByIdPost(this IMarginTradingApi operations, string id, string apiKey)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeRoutesDeletelocalByIdPostAsync(id, apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ApiBackofficeRoutesDeletelocalByIdPostAsync(this IMarginTradingApi operations, string id, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ApiBackofficeRoutesDeletelocalByIdPostWithHttpMessagesAsync(id, apiKey, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static bool? ApiBackofficeSettingsEnabledByClientIdGet(this IMarginTradingApi operations, string clientId, string apiKey)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeSettingsEnabledByClientIdGetAsync(clientId, apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<bool?> ApiBackofficeSettingsEnabledByClientIdGetAsync(this IMarginTradingApi operations, string clientId, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiBackofficeSettingsEnabledByClientIdGetWithHttpMessagesAsync(clientId, apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='enabled'>
            /// </param>
            public static void ApiBackofficeSettingsEnabledByClientIdPost(this IMarginTradingApi operations, string clientId, string apiKey, bool? enabled = default(bool?))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeSettingsEnabledByClientIdPostAsync(clientId, apiKey, enabled), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='enabled'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ApiBackofficeSettingsEnabledByClientIdPostAsync(this IMarginTradingApi operations, string clientId, string apiKey, bool? enabled = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ApiBackofficeSettingsEnabledByClientIdPostWithHttpMessagesAsync(clientId, apiKey, enabled, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static void ApiBackofficeServiceMaintenanceGet(this IMarginTradingApi operations, string apiKey)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeServiceMaintenanceGetAsync(apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ApiBackofficeServiceMaintenanceGetAsync(this IMarginTradingApi operations, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ApiBackofficeServiceMaintenanceGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='enabled'>
            /// </param>
            public static void ApiBackofficeServiceMaintenancePost(this IMarginTradingApi operations, string apiKey, bool? enabled = default(bool?))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiBackofficeServiceMaintenancePostAsync(apiKey, enabled), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='enabled'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ApiBackofficeServiceMaintenancePostAsync(this IMarginTradingApi operations, string apiKey, bool? enabled = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ApiBackofficeServiceMaintenancePostWithHttpMessagesAsync(apiKey, enabled, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IsAliveResponse ApiIsAliveGet(this IMarginTradingApi operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiIsAliveGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<IsAliveResponse> ApiIsAliveGetAsync(this IMarginTradingApi operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiIsAliveGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            public static InitDataBackendResponse ApiMtInitdataPost(this IMarginTradingApi operations, string apiKey, ClientIdBackendRequest request = default(ClientIdBackendRequest))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiMtInitdataPostAsync(apiKey, request), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<InitDataBackendResponse> ApiMtInitdataPostAsync(this IMarginTradingApi operations, string apiKey, ClientIdBackendRequest request = default(ClientIdBackendRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiMtInitdataPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// uses in BoxOptions app only
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static InitChartDataBackendResponse ApiMtInitchartdataPost(this IMarginTradingApi operations, string apiKey)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiMtInitchartdataPostAsync(apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// uses in BoxOptions app only
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<InitChartDataBackendResponse> ApiMtInitchartdataPostAsync(this IMarginTradingApi operations, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiMtInitchartdataPostWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            public static System.Collections.Generic.IList<MarginTradingAccountBackendContract> ApiMtInitaccountsPost(this IMarginTradingApi operations, string apiKey, ClientIdBackendRequest request = default(ClientIdBackendRequest))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiMtInitaccountsPostAsync(apiKey, request), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<MarginTradingAccountBackendContract>> ApiMtInitaccountsPostAsync(this IMarginTradingApi operations, string apiKey, ClientIdBackendRequest request = default(ClientIdBackendRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiMtInitaccountsPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            public static InitAccountInstrumentsBackendResponse ApiMtInitaccountinstrumentsPost(this IMarginTradingApi operations, string apiKey, ClientIdBackendRequest request = default(ClientIdBackendRequest))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiMtInitaccountinstrumentsPostAsync(apiKey, request), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<InitAccountInstrumentsBackendResponse> ApiMtInitaccountinstrumentsPostAsync(this IMarginTradingApi operations, string apiKey, ClientIdBackendRequest request = default(ClientIdBackendRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiMtInitaccountinstrumentsPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static InitChartDataBackendResponse ApiMtInitgraphPost(this IMarginTradingApi operations, string apiKey)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiMtInitgraphPostAsync(apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<InitChartDataBackendResponse> ApiMtInitgraphPostAsync(this IMarginTradingApi operations, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiMtInitgraphPostWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            public static System.Collections.Generic.IList<string> ApiMtInitavailableassetsPost(this IMarginTradingApi operations, string apiKey, ClientIdBackendRequest request = default(ClientIdBackendRequest))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiMtInitavailableassetsPostAsync(apiKey, request), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> ApiMtInitavailableassetsPostAsync(this IMarginTradingApi operations, string apiKey, ClientIdBackendRequest request = default(ClientIdBackendRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiMtInitavailableassetsPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static System.Collections.Generic.IList<MarginTradingAssetBackendContract> ApiMtInitassetsPost(this IMarginTradingApi operations, string apiKey)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiMtInitassetsPostAsync(apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<MarginTradingAssetBackendContract>> ApiMtInitassetsPostAsync(this IMarginTradingApi operations, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiMtInitassetsPostWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            public static AccountHistoryBackendResponse ApiMtAccounthistoryPost(this IMarginTradingApi operations, string apiKey, AccountHistoryBackendRequest request = default(AccountHistoryBackendRequest))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiMtAccounthistoryPostAsync(apiKey, request), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AccountHistoryBackendResponse> ApiMtAccounthistoryPostAsync(this IMarginTradingApi operations, string apiKey, AccountHistoryBackendRequest request = default(AccountHistoryBackendRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiMtAccounthistoryPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            public static AccountNewHistoryBackendResponse ApiMtAccounthistorynewPost(this IMarginTradingApi operations, string apiKey, AccountHistoryBackendRequest request = default(AccountHistoryBackendRequest))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiMtAccounthistorynewPostAsync(apiKey, request), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AccountNewHistoryBackendResponse> ApiMtAccounthistorynewPostAsync(this IMarginTradingApi operations, string apiKey, AccountHistoryBackendRequest request = default(AccountHistoryBackendRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiMtAccounthistorynewPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            public static OpenOrderBackendResponse ApiMtOrderplacePost(this IMarginTradingApi operations, string apiKey, OpenOrderBackendRequest request = default(OpenOrderBackendRequest))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiMtOrderplacePostAsync(apiKey, request), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<OpenOrderBackendResponse> ApiMtOrderplacePostAsync(this IMarginTradingApi operations, string apiKey, OpenOrderBackendRequest request = default(OpenOrderBackendRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiMtOrderplacePostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            public static MtBackendResponseBoolean ApiMtOrderclosePost(this IMarginTradingApi operations, string apiKey, CloseOrderBackendRequest request = default(CloseOrderBackendRequest))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiMtOrderclosePostAsync(apiKey, request), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<MtBackendResponseBoolean> ApiMtOrderclosePostAsync(this IMarginTradingApi operations, string apiKey, CloseOrderBackendRequest request = default(CloseOrderBackendRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiMtOrderclosePostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            public static MtBackendResponseBoolean ApiMtOrdercancelPost(this IMarginTradingApi operations, string apiKey, CloseOrderBackendRequest request = default(CloseOrderBackendRequest))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiMtOrdercancelPostAsync(apiKey, request), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<MtBackendResponseBoolean> ApiMtOrdercancelPostAsync(this IMarginTradingApi operations, string apiKey, CloseOrderBackendRequest request = default(CloseOrderBackendRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiMtOrdercancelPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            public static System.Collections.Generic.IList<OrderBackendContract> ApiMtOrderlistPost(this IMarginTradingApi operations, string apiKey, ClientIdBackendRequest request = default(ClientIdBackendRequest))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiMtOrderlistPostAsync(apiKey, request), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<OrderBackendContract>> ApiMtOrderlistPostAsync(this IMarginTradingApi operations, string apiKey, ClientIdBackendRequest request = default(ClientIdBackendRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiMtOrderlistPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            public static System.Collections.Generic.IList<OrderBackendContract> ApiMtOrderaccountlistPost(this IMarginTradingApi operations, string apiKey, AccountClientIdBackendRequest request = default(AccountClientIdBackendRequest))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiMtOrderaccountlistPostAsync(apiKey, request), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<OrderBackendContract>> ApiMtOrderaccountlistPostAsync(this IMarginTradingApi operations, string apiKey, AccountClientIdBackendRequest request = default(AccountClientIdBackendRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiMtOrderaccountlistPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            public static ClientOrdersBackendResponse ApiMtOrderpositionsPost(this IMarginTradingApi operations, string apiKey, ClientIdBackendRequest request = default(ClientIdBackendRequest))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiMtOrderpositionsPostAsync(apiKey, request), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ClientOrdersBackendResponse> ApiMtOrderpositionsPostAsync(this IMarginTradingApi operations, string apiKey, ClientIdBackendRequest request = default(ClientIdBackendRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiMtOrderpositionsPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            public static MtBackendResponseBoolean ApiMtOrderchangeLimitsPost(this IMarginTradingApi operations, string apiKey, ChangeOrderLimitsBackendRequest request = default(ChangeOrderLimitsBackendRequest))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiMtOrderchangeLimitsPostAsync(apiKey, request), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<MtBackendResponseBoolean> ApiMtOrderchangeLimitsPostAsync(this IMarginTradingApi operations, string apiKey, ChangeOrderLimitsBackendRequest request = default(ChangeOrderLimitsBackendRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiMtOrderchangeLimitsPostWithHttpMessagesAsync(apiKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static OrderbooksBackendResponse ApiMtOrderbooksPost(this IMarginTradingApi operations, string apiKey)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiMtOrderbooksPostAsync(apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<OrderbooksBackendResponse> ApiMtOrderbooksPostAsync(this IMarginTradingApi operations, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiMtOrderbooksPostWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static MtBackendResponseString ApiMtPingPost(this IMarginTradingApi operations, string apiKey)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiMtPingPostAsync(apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<MtBackendResponseString> ApiMtPingPostAsync(this IMarginTradingApi operations, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiMtPingPostWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static System.Collections.Generic.IList<MarginTradingAssetBackendContract> ApiRisksAssetsGet(this IMarginTradingApi operations, string apiKey)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiRisksAssetsGetAsync(apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<MarginTradingAssetBackendContract>> ApiRisksAssetsGetAsync(this IMarginTradingApi operations, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiRisksAssetsGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            public static System.Collections.Generic.IList<MarginTradingAccountBackendContract> ApiRisksAccountsGet(this IMarginTradingApi operations, string apiKey)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiRisksAccountsGetAsync(apiKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<MarginTradingAccountBackendContract>> ApiRisksAccountsGetAsync(this IMarginTradingApi operations, string apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiRisksAccountsGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='accountId'>
            /// </param>
            /// <param name='fromParameter'>
            /// </param>
            /// <param name='to'>
            /// </param>
            public static System.Collections.Generic.IDictionary<string, System.Collections.Generic.IList<AccountHistoryBackendContract>> ApiRisksAccountsHistoryGet(this IMarginTradingApi operations, string apiKey, string accountId = default(string), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IMarginTradingApi)s).ApiRisksAccountsHistoryGetAsync(apiKey, accountId, fromParameter, to), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// access token
            /// </param>
            /// <param name='accountId'>
            /// </param>
            /// <param name='fromParameter'>
            /// </param>
            /// <param name='to'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, System.Collections.Generic.IList<AccountHistoryBackendContract>>> ApiRisksAccountsHistoryGetAsync(this IMarginTradingApi operations, string apiKey, string accountId = default(string), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiRisksAccountsHistoryGetWithHttpMessagesAsync(apiKey, accountId, fromParameter, to, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
